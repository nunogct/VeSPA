`timescale 1ns / 1ps

    module Memory(
    input clk,
    input rst,
    input mem_write,

    input [31:0]ram_addr, 
   input [31:0]rom_addr,
    
    input [31:0]ram_in,
    
    output [7:0]int_map,
    output [15:0]PWM_n, //
    output [15:0]PWM_v, //
    
    output [31:0]ram_out,
    output [31:0]rom_out
    );
    
    parameter RAMSIZE = (1<<10);  
    parameter ROMSIZE = (1<<10);
    
    reg [7:0]RAM [0:RAMSIZE-1]; 
    reg [7:0]ROM [0:ROMSIZE-1];   

    integer i;
        
    initial begin
    for(i=0; i < RAMSIZE ; i = i + 1)
    RAM[i] = 'd0;  
   
   /* 
    ROM[0] = 8'b01010000;
    ROM[1] = 8'b11000000; 
    ROM[2] = 8'b00000000;
    ROM[3] = 8'b00011110; // R3 = MEM[30]
    
    ROM[4] = 8'b01010001;
    ROM[5] = 8'b00000000; 
    ROM[6] = 8'b00000000;
    ROM[7] = 8'b00011110; // R4 = 8
    
    RAM[30] = 8'b00000100;*/
    
    //////////////////////////////////////////////////
    
    
//    ROM[0] = 8'b00001000;
//    ROM[1] = 8'b11000010;
//    ROM[2] = 8'b00010000;
//    ROM[3] = 8'b00000000; // ADD r3 = r2 + r1
    
//    ROM[4] = 8'b00010001;
//    ROM[5] = 8'b00001011;
//    ROM[6] = 8'b00000000;
//    ROM[7] = 8'b00000101; // ADD r4 = r5 - #5
    
//    ROM[8] = 8'b00001001;
//    ROM[9] = 8'b10001001;
//    ROM[10] = 8'b00000000;
//    ROM[11] = 8'b00001010; // ADD r6 = r4 + #10*/d
    
    /////////////////////////////////////////////////////////////////////////

//====================INT=TEST============================
   
    RAM[4] = 8'b10110000;
   
    /*ROM[0] = 8'b01011000;
    ROM[1] = 8'b00000000;
    ROM[2] = 8'b00000000;
    ROM[3] = 8'b00000000; //R0 = 0
    
    ROM[4] = 8'b01011000;
    ROM[5] = 8'b10000000;
    ROM[6] = 8'b00000000;
    ROM[7] = 8'b00000111; //R2 = 7
    
    ROM[8] = 8'b01001000; 
    ROM[9] = 8'b00000100;
    ROM[10] = 8'b00000000; //JMP 7 ; pc_error = 1;
    ROM[11] = 8'b00000000;*/
     
    ROM[160] = 8'b00000000; 
    ROM[161] = 8'b11111111;
    ROM[162] = 8'b00000000; 
    ROM[163] = 8'b11111111; 
     
    ROM[164] = 8'b01111000; 
    ROM[165] = 8'b00000000;
    ROM[166] = 8'b00000000; 
    ROM[167] = 8'b00000000;   
     
    ROM[176] = 8'b11111111; 
    ROM[177] = 8'b11111111;
    ROM[178] = 8'b11111111;
    ROM[179] = 8'b11111111;
    
    ROM[64] = 8'b01011000;
    ROM[65] = 8'b00000000;
    ROM[66] = 8'b00000000;
    ROM[67] = 8'b00000000; //R0 = 0
    
    ROM[68] = 8'b01011000;
    ROM[69] = 8'b10000000;
    ROM[70] = 8'b00000000;
    ROM[71] = 8'b00000111; //R2 = 7
    
    ROM[72] = 8'b01001000; 
    ROM[73] = 8'b00000100;
    ROM[74] = 8'b00000000; //JMP 7 ; pc_error = 1;
    ROM[75] = 8'b00000000;
 
 //======================================================
   /*
    ROM[0] = 8'b01011000;
    ROM[1] = 8'b00000000;
    ROM[2] = 8'b00000000;
    ROM[3] = 8'b00000000; //R0 = 0
    
    ROM[4] = 8'b01011000;
    ROM[5] = 8'b10000000;
    ROM[6] = 8'b00000000;
    ROM[7] = 8'b00001000; //R2 = 8
     
    ROM[8] = 8'b01110000;
    ROM[9] = 8'b11000100;
    ROM[10] = 8'b00000000;
    ROM[11] = 8'b00000100; // RAM[12] = 20
    
    ROM[12] = 8'b00111000;
    ROM[13] = 8'b00001000;
    ROM[14] = 8'b00100000;
    ROM[15] = 8'b00000000; // Z = 1
    
    ROM[16] = 8'b01000000;
    ROM[17] = 8'b00000000;
    ROM[18] = 8'b00000000;
    ROM[19] = 8'b00001000; // PC = PC + 8
     
    ROM[20] = 8'b11111111;
    ROM[21] = 8'b11111111;
    ROM[22] = 8'b11111111;
    ROM[23] = 8'b11111111; // HALT
    
    ROM[24] = 8'b01001000;
    ROM[25] = 8'b00000000;
    ROM[26] = 8'b00000000;
    ROM[27] = 8'b00000101; // PC = 0 + 4
    
    ROM[28] = 8'b11111111;
    ROM[29] = 8'b11111111;
    ROM[30] = 8'b11111111;
    ROM[31] = 8'b11111111; // HALT 
    */
/////////////////////////////////////////////////////////////////////////////////////////////////
    
  /*  ROM[0] = 8'b01011000;
    ROM[1] = 8'b01000000;
    ROM[2] = 8'b00000000;
    ROM[3] = 8'b00000100; 
    
    ROM[4] = 8'b01010000;
    ROM[5] = 8'b10000000;
    ROM[6] = 8'b00000000;
    ROM[7] = 8'b00000010; 
    
    
    ROM[8] = 8'b01100000;
    ROM[9] = 8'b11000010;
    ROM[10] = 8'b00000000;
    ROM[11] = 8'b00000100; 
    
    RAM[2] = 'hAA;
    RAM[8] = 'hBB;*/
    
    
    /*ROM[4] = 8'b01001000;
    ROM[5] = 8'b11000011;
    ROM[6] = 8'b00000000; // PC = #0 + R1
    ROM[7] = 8'b00001100; // R3 = PC
    
    ROM[12] = 8'b01000000; // PC = PC + #0
    ROM[13] = 8'b00000000;
    ROM[14] = 8'b00000000;
    ROM[15] = 8'b01000100;
    
    
    ROM[80] = 8'b11111111;
    ROM[81] = 8'b00000000;
    ROM[82] = 8'b11111111;
    ROM[83] = 8'b00000000;*/
    
    //========================================================
     
//    ROM[4] = 8'b01010000;
//    ROM[5] = 8'b10000000;
//    ROM[6] = 8'b00000000;
//    ROM[7] = 8'b00000010; 
    
//    ROM[12] = 8'b00011000;
//    ROM[13] = 8'b00000000;
//    ROM[14] = 8'b00000000;
//    ROM[15] = 8'b00000000; // RAM[12] = 20
    
//    ROM[20] = 8'b00011000;
//    ROM[21] = 8'b00000000;
//    ROM[22] = 8'b00000000;
//    ROM[23] = 8'b00000000; // RAM[12] = 20
    
    //========================================================
    
 /*   
    ROM[0] = 8'b00000_000;
    ROM[1] = 8'b00000000;
    ROM[2] = 8'b00000000;
    ROM[3] = 8'b00000000; //R0 = 0
    
    ROM[4] = 8'b00001_000;
    ROM[5] = 8'b00000000;
    ROM[6] = 8'b00000000;
    ROM[7] = 8'b00000000; //R2 = 8
    
    
    ROM[8] = 8'b00010_001;
    ROM[9] = 8'b00000001;
    ROM[10] = 8'b00000000;
    ROM[11] = 8'b00000000; //R4 = 8, PC = 20 
     
   ROM[12] = 8'b00011_000;
ROM[13] = 8'b00000000;
ROM[14] = 8'b00000000;
ROM[15] = 8'b00000000; // RAM[12] = 20

ROM[16] = 8'b00100_000;
ROM[17] = 8'b00000000;
ROM[18] = 8'b00000000;
ROM[19] = 8'b00000000; // Z = 1

ROM[20] = 8'b00101_001;
ROM[21] = 8'b10000000;
ROM[22] = 8'b00000000;
ROM[23] = 8'b00001000; // PC = PC + 8

ROM[24] = 8'b00110_000;
ROM[25] = 8'b00000000;
ROM[26] = 8'b00000000;
ROM[27] = 8'b00000000; // HALT

ROM[28] = 8'b00111_000;
ROM[29] = 8'b00000000;
ROM[30] = 8'b00000000;
ROM[31] = 8'b00000100; // PC = 0 + 4

ROM[32] = 8'b01010_000;
ROM[33] = 8'b00000010;
ROM[34] = 8'b00000001;
ROM[35] = 8'b00000000; // R2 = R1 + 1

ROM[36] = 8'b01011_000;
ROM[37] = 8'b00000000;
ROM[38] = 8'b00000010;
ROM[39] = 8'b00000000; // R0 = R2

ROM[40] = 8'b01100_000;
ROM[41] = 8'b00000000;
ROM[42] = 8'b00000000;
ROM[43] = 8'b00000000;

ROM[44] = 8'b01101_000;
ROM[45] = 8'b00000000;
ROM[46] = 8'b00000000;
ROM[47] = 8'b00000000; // PC = 4

ROM[48] = 8'b01110_000;
ROM[49] = 8'b00000000;
ROM[50] = 8'b00000000;
ROM[51] = 8'b00000000; // PC = 4

ROM[52] = 8'b11111_000;
ROM[53] = 8'b00000000;
ROM[54] = 8'b00000000;
ROM[55] = 8'b00000000; // HALT
*/
    
    end
    

    
    always@(posedge clk)
    begin
    
    if(rst)
    begin
    for(i=0; i < RAMSIZE ; i = i + 1)
    RAM[i] = 'd0;     
    end
    else if(mem_write)
    begin
    RAM[ram_addr + 3] <= ram_in[7:0];
    RAM[ram_addr + 2] <= ram_in[15:8];
    RAM[ram_addr + 1] <= ram_in[23:16];
    RAM[ram_addr + 0] <= ram_in[31:24]; 
    end
end

    assign ram_out = {RAM[ram_addr], RAM[ram_addr + 1], RAM[ram_addr + 2], RAM[ram_addr + 3]};
    assign rom_out = {ROM[rom_addr], ROM[rom_addr + 1], ROM[rom_addr + 2], ROM[rom_addr + 3]};
    assign int_map = RAM[4];
    assign PWM_v = {RAM[8],RAM[9]};
    assign PWM_n = {RAM[10],RAM[11]};
    
endmodule